import openai
import logging
import aiogram.utils.markdown as md
import sqlite3

from time import sleep
from sqlite3 import Error
from random import randint
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, ParseMode, KeyboardButton, ReplyKeyboardRemove, ReplyKeyboardMarkup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text, BoundFilter
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.utils import executor
from aiogram.types.message import ContentTypes

logging.basicConfig(level=logging.INFO)

#TEST TOKENS
openai.api_key = "token"
API_TOKEN = 'token' 
PAYMENTS_PROVIDER_TOKEN = 'token'

# Initialize bot and dispatcher
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())

def create_connection(db_file):
    """ create a database connection to a SQLite database """
    conn = None
    try:
        conn = sqlite3.connect('path')
        print(sqlite3.version)
    except Error as e:
        print(e)
    finally:
        if conn:
            cur = conn.cursor()

conn = sqlite3.connect(r'path')

#GPT PROCESS

def gpt3_completition(prompt, model="text-davinci-003", temperature=0.7, max_tokens=1500):
    promt = prompt.encode(encoding='ASCII', errors = 'ignore').decode()

    response = openai.Completion.create(
        model = model,
        prompt = prompt,
        temperature = temperature,
        max_tokens = max_tokens, 
    )
    text = response['choices'][0]['text'].strip()
    words = text.split()
    global num_words
    num_words = len(words)

    return text

def available_balance(user_id):

    cursor = conn.cursor()
    cursor.execute('SELECT * FROM users WHERE user_id=?', (user_id,))
    row = cursor.fetchone()
    column_value = row[1]
    print(column_value)
    cursor.close()

    return column_value


#BUTTONS

button1 = InlineKeyboardButton("–ù–∞–ø–∏—Å–∞—Ç—å —Å–æ—á–∏–Ω–µ–Ω–∏–µ", callback_data="gen")
button2 = InlineKeyboardButton("–ü—Ä–æ—Ñ–∏–ª—å", callback_data="prof")
button3 = InlineKeyboardButton("–ö—É–ø–∏—Ç—å –°–ª–æ–≤–∞", callback_data="buy")

keyboard = InlineKeyboardMarkup(
    inline_keyboard=[
        [button1],
        [button2, button3]
    ]
)

keyboard_words = InlineKeyboardMarkup()
keyboard_words.add(
    InlineKeyboardButton("1000 —Å–ª–æ–≤", callback_data = "w1000"),
    InlineKeyboardButton("2800 —Å–ª–æ–≤", callback_data = "w2800"),
    InlineKeyboardButton("5000 —Å–ª–æ–≤", callback_data = "w5000"),
    InlineKeyboardButton("13500 —Å–ª–æ–≤", callback_data = "w13500") 
)

keyboard_back = InlineKeyboardMarkup()
keyboard_back.add(
    InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="bk")
)

keyboard_backwords = InlineKeyboardMarkup()
keyboard_backwords.add(
    InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="bkwords")
)

keyboard_backdel = InlineKeyboardMarkup()
keyboard_backdel.add(
    InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="bkdel")
)

#BOT CODE

class Form(StatesGroup):
    get_user_msg = State() 
    welcome = State()
    amount = State()
    words_amont = State()
    global_user_id = State()
    global_user_name = State()


@dp.message_handler(commands=['start', 'help'])
async def send_welcome(message: types.Message, state: FSMContext):

    
    print(message.from_user.id)

    cursor = conn.cursor()
    cursor.execute('SELECT * FROM users WHERE user_id=?', (message.from_user.id,))
    result = cursor.fetchone()

    if result is None:
        cursor.execute(f"INSERT INTO users VALUES ('{message.from_user.id}', '{500}')")
    else:
        print('User exists')
    
    conn.commit()

    await bot.send_message(
        message.from_user.id, 
        text=f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!\n\n–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å —Å–æ —Å–ª–µ–¥—É—é—â–∏–º —ç—Å—Å–µ? –ü—Ä–æ—Å—Ç–æ —É–∫–∞–∂–∏ —Ç–µ–º—É –∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è, –∞ —è —É–∂–µ —Å–¥–µ–ª–∞—é –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω–æ–µ. \n–ù–∞—à–∏ –ø–µ—Ä–µ–¥–æ–≤—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –ø–æ–∑–≤–æ–ª—è—é—Ç –Ω–∞–º –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å, –æ–±—Ä–∏—Å–æ–≤—ã–≤–∞—Ç—å –≤ –æ–±—â–∏—Ö —á–µ—Ä—Ç–∞—Ö –∏ –ø–∏—Å–∞—Ç—å –ø–µ—Ä–≤–æ–∫–ª–∞—Å—Å–Ω—ã–µ —ç—Å—Å–µ —Å —É—á–µ—Ç–æ–º —Ç–≤–æ–∏—Ö –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–µ–π.\n\n–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É '–ù–∞–ø–∏—Å–∞—Ç—å —Å–æ—á–∏–Ω–µ–Ω–∏–µ' —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å!", 
        reply_markup = keyboard)

@dp.callback_query_handler()
async def generate_text(call: types.CallbackQuery):

    call_user_firstname = call.from_user.first_name
    print(call_user_firstname)
    call_user_id = call.from_user.id
    print(call_user_id)


    #BACKS

    if call.data == "bk":
        await bot.delete_message(chat_id = call.message.chat.id, message_id = call.message.message_id)

        chat_id = call.message.chat.id
        await bot.send_message( 
            chat_id=chat_id,
            text=f"–ü—Ä–∏–≤–µ—Ç, {call_user_firstname}!\n\n–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å —Å–æ —Å–ª–µ–¥—É—é—â–∏–º —ç—Å—Å–µ? –ü—Ä–æ—Å—Ç–æ —É–∫–∞–∂–∏ —Ç–µ–º—É –∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è, –∞ —è —É–∂–µ —Å–¥–µ–ª–∞—é –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω–æ–µ. \n–ù–∞—à–∏ –ø–µ—Ä–µ–¥–æ–≤—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –ø–æ–∑–≤–æ–ª—è—é—Ç –Ω–∞–º –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å, –æ–±—Ä–∏—Å–æ–≤—ã–≤–∞—Ç—å –≤ –æ–±—â–∏—Ö —á–µ—Ä—Ç–∞—Ö –∏ –ø–∏—Å–∞—Ç—å –ø–µ—Ä–≤–æ–∫–ª–∞—Å—Å–Ω–æ–µ —ç—Å—Å–µ —Å —É—á–µ—Ç–æ–º —Ç–≤–æ–∏—Ö –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–µ–π.", 
            reply_markup = keyboard)

    elif call.data == "bkwords":
        await bot.delete_message(chat_id = call.message.chat.id, message_id = call.message.message_id - 1)
        await bot.delete_message(chat_id = call.message.chat.id, message_id = call.message.message_id)

        chat_id = call.message.chat.id
        await bot.send_message( 
            chat_id=chat_id,
            text=f"–ü—Ä–∏–≤–µ—Ç, {call_user_firstname}!\n\n–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å —Å–æ —Å–ª–µ–¥—É—é—â–∏–º —ç—Å—Å–µ? –ü—Ä–æ—Å—Ç–æ —É–∫–∞–∂–∏ —Ç–µ–º—É –∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è, –∞ —è —É–∂–µ —Å–¥–µ–ª–∞—é –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω–æ–µ. \n–ù–∞—à–∏ –ø–µ—Ä–µ–¥–æ–≤—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –ø–æ–∑–≤–æ–ª—è—é—Ç –Ω–∞–º –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å, –æ–±—Ä–∏—Å–æ–≤—ã–≤–∞—Ç—å –≤ –æ–±—â–∏—Ö —á–µ—Ä—Ç–∞—Ö –∏ –ø–∏—Å–∞—Ç—å –ø–µ—Ä–≤–æ–∫–ª–∞—Å—Å–Ω–æ–µ —ç—Å—Å–µ —Å —É—á–µ—Ç–æ–º —Ç–≤–æ–∏—Ö –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–µ–π.", 
            reply_markup = keyboard)

    elif call.data == "bkdel":
        await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=call.message.text)
        chat_id = call.message.chat.id
        await bot.send_message( 
            chat_id=chat_id,
            text=f"–ü—Ä–∏–≤–µ—Ç, {call_user_firstname}!\n\n–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å —Å–æ —Å–ª–µ–¥—É—é—â–∏–º —ç—Å—Å–µ? –ü—Ä–æ—Å—Ç–æ —É–∫–∞–∂–∏ —Ç–µ–º—É –∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è, –∞ —è —É–∂–µ —Å–¥–µ–ª–∞—é –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω–æ–µ. \n–ù–∞—à–∏ –ø–µ—Ä–µ–¥–æ–≤—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –ø–æ–∑–≤–æ–ª—è—é—Ç –Ω–∞–º –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å, –æ–±—Ä–∏—Å–æ–≤—ã–≤–∞—Ç—å –≤ –æ–±—â–∏—Ö —á–µ—Ä—Ç–∞—Ö –∏ –ø–∏—Å–∞—Ç—å –ø–µ—Ä–≤–æ–∫–ª–∞—Å—Å–Ω–æ–µ —ç—Å—Å–µ —Å —É—á–µ—Ç–æ–º —Ç–≤–æ–∏—Ö –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–µ–π.", 
            reply_markup = keyboard)
        

    #KEYBOARD BUTTONS

    elif call.data == "gen":

        if int(available_balance(call_user_id)) <= 0:
            await call.message.answer(f"–í–∞—à –±–∞–ª–∞–Ω—Å: {available_balance(call_user_id)} —Å–ª–æ–≤. –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É '–ö—É–ø–∏—Ç—å –°–ª–æ–≤–∞' –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é. –¶–µ–Ω—ã –º–∏–∑–µ—Ä–Ω—ã–µ", reply_markup=keyboard_backwords)
        else:
            await call.message.delete()
            await call.message.answer("""–ù–∞–ø–∏—à–∏ –≤ —ç—Ç–æ—Ç —á–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–≤–æ–µ–π —Ç–µ–º–æ–π —Å–æ—á–∏–Ω–µ–Ω–∏—è –∏ —è —Å—Ä–∞–∑—É –∂–µ –Ω–∞—á–Ω—É! 

–í–æ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–∏–º–µ—Ä–æ–≤, –µ—Å–ª–∏ –Ω–µ –∑–Ω–∞–µ—à—å —Å —á–µ–≥–æ –Ω–∞—á–∞—Ç—å:
- Izveidot publisko runu pusotras min≈´tes ilgumƒÅ par Latvijas Kult≈´ras kanonu.
- –ù–∞–ø–∏—à–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —ç—Å—Å–µ –Ω–∞ 200 —Å–ª–æ–≤ –æ –ø—Ä–∏—á–∏–Ω–µ —Å–º–µ—Ä—Ç–∏ –ü—É—à–∫–∏–Ω–∞. –î–æ–±–∞–≤—å –º–Ω–µ–Ω–∏–µ –æ —Ç–æ–º —á—Ç–æ –º–æ–≥–ª–æ –ø—Ä–æ–∏–∑–æ–π—Ç–∏ –µ—Å–ª–∏ –±—ã –æ–Ω –≤—ã–∂–∏–ª.
- How does the current animal farm life compare to what Old Major said life should be? Are all of the pigs‚Äô lives suffering and misery?""")
            await Form.get_user_msg.set()

    elif call.data == "prof":
        await call.message.delete()
        await bot.send_message (
            call.message.chat.id, f"–í–∞—à –±–∞–ª–∞–Ω—Å: {available_balance(call_user_id)} —Å–ª–æ–≤(–∞)")
        await bot.send_message (
            call.message.chat.id, f"–°–¥–µ–ª–∞–Ω–æ —Å ‚ô•Ô∏è –∏–∑ üá±üáª —ç—Ç–∏–º —á–µ–ª–æ–º - @vorobjovs. –ü–∏—à–∏ –µ—Å–ª–∏ –∑–∞–º–µ—Ç–∏–ª –±–∞–≥ –∏–ª–∏ –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã", reply_markup = keyboard_backwords)

    elif call.data == "buy":
        await call.message.delete()
        await call.message.answer("–°–∫–æ–ª—å–∫–æ —Å–ª–æ–≤ —Ö–æ—á–µ—à—å –∫—É–ø–∏—Ç—å? –¶–µ–Ω—ã –ø—Ä–æ—Å—Ç–æ –º–∏–∑–µ—Ä–Ω—ã–µ", 
            reply_markup = keyboard_words)

    #BUYING WORDS BUTTONS

    elif call.data == "w1000":
        await call.message.delete()
        await bot.send_invoice(
            call.message.chat.id,
            title="1000 words",
            description="1000 words will be added to your balance",
            payload="1000_words",
            provider_token=PAYMENTS_PROVIDER_TOKEN,
            start_parameter="1000_words",
            currency="USD",
            prices=[types.LabeledPrice(label="1000 words", amount=199)])
            
        await call.message.answer ("1000 words will arrive at your balance immidiately after payment.\nPress'back button after purchase'", 
            reply_markup=keyboard_backwords)
        
    elif call.data == "w2800": 
        await call.message.delete()                    
        await bot.send_invoice(
            call.message.chat.id,
            title="2800 —Å–ª–æ–≤",
            description="–ü–æ–ø–æ–ª–Ω–µ–Ω–µ –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ 2800 —Å–ª–æ–≤",
            payload="2800_words",
            provider_token=PAYMENTS_PROVIDER_TOKEN,
            start_parameter="2800_words",
            currency="USD",
            prices=[types.LabeledPrice(label="2800 words", amount=499)])
        await call.message.answer ("2800 —Å–ª–æ–≤ –ø–æ—è–≤—è—Ç—Å—è –Ω–∞ —Ç–≤–æ–µ–º –±–∞–ª–∞–Ω—Å–µ –≤ —Ç—É –∂–µ —Å–µ–∫—É–Ω–¥–∫—É –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –∏–Ω–≤–æ–π—Å–∞ —Å–≤–µ—Ä—Ö—É.\n–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É '–Ω–∞–∑–∞–¥' —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", 
            reply_markup=keyboard_backwords)

    elif call.data == "w5000":
        await call.message.delete()
        await bot.send_invoice(
            call.message.chat.id,
            title="5000 —Å–ª–æ–≤",
            description="W–ü–æ–ø–æ–ª–Ω–µ–Ω–µ –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ 5000 —Å–ª–æ–≤",
            payload="5000_words",
            provider_token=PAYMENTS_PROVIDER_TOKEN,
            start_parameter="5000_words",
            currency="USD",
            prices=[types.LabeledPrice(label="5000 words", amount=799)])
        await call.message.answer ("5000 —Å–ª–æ–≤ –ø–æ—è–≤—è—Ç—Å—è –Ω–∞ —Ç–≤–æ–µ–º –±–∞–ª–∞–Ω—Å–µ –≤ —Ç—É –∂–µ —Å–µ–∫—É–Ω–¥–∫—É –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –∏–Ω–≤–æ–π—Å–∞ —Å–≤–µ—Ä—Ö—É.\n–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É '–Ω–∞–∑–∞–¥' —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é",
            reply_markup=keyboard_backwords)

    elif call.data == "w13500":
        await call.message.delete()
        await bot.send_invoice(
            call.message.chat.id,
            title="13500 —Å–ª–æ–≤",
            description="–ü–æ–ø–æ–ª–Ω–µ–Ω–µ –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ 13500 —Å–ª–æ–≤",
            payload="13500_words",
            provider_token=PAYMENTS_PROVIDER_TOKEN,
            start_parameter="13500_words",
            currency="USD",
            prices=[types.LabeledPrice(label="13500 words", amount=1399)])
        await call.message.answer ("13500 —Å–ª–æ–≤ –ø–æ—è–≤—è—Ç—Å—è –Ω–∞ —Ç–≤–æ–µ–º –±–∞–ª–∞–Ω—Å–µ –≤ —Ç—É –∂–µ —Å–µ–∫—É–Ω–¥–∫—É –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –∏–Ω–≤–æ–π—Å–∞ —Å–≤–µ—Ä—Ö—É.\n–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É '–Ω–∞–∑–∞–¥' —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", 
            reply_markup=keyboard_backwords)

@dp.pre_checkout_query_handler(lambda query: True)
async def handle_pre_checkout(query: types.PreCheckoutQuery):

    await bot.answer_pre_checkout_query(
        query.id,
        ok=True,
        )

@dp.message_handler(content_types=ContentTypes.SUCCESSFUL_PAYMENT)
async def handle_successful_payment(successful_payment: types.Message):

    # Get the invoice payload from the successful payment message
    invoice_payload = successful_payment.successful_payment.invoice_payload

    cursor = conn.cursor()
    user_id = successful_payment.from_user.id

    # Update the user's balance in the database
    if invoice_payload == "1000_words":
        cursor.execute("UPDATE users SET balance = balance+1000 WHERE user_id = ?", (successful_payment.from_user.id,))
    elif invoice_payload == "2800_words":
        cursor.execute("UPDATE users SET balance=balance+2000 WHERE user_id = ?", (successful_payment.from_user.id,))
    elif invoice_payload == "5000_words":
        cursor.execute("UPDATE users SET balance=balance+2000 WHERE user_id = ?", (successful_payment.from_user.id,))
    elif invoice_payload == "13500_words":
        cursor.execute("UPDATE users SET balance=balance+2000 WHERE user_id = ?", (successful_payment.from_user.id,))

    # Save the changes to the database
    conn.commit()
    
@dp.callback_query_handler()
async def text(message: types.Message):
    message = message.text

@dp.message_handler(state=Form.get_user_msg)
async def setFoto(message: types.Message, state: FSMContext):

    await message.answer("–ù–∞—á–∏–Ω–∞—é –ø–∏—Å–∞—Ç—å —Ç–µ–∫—Å—Ç")
    sleep(1)
    await bot.edit_message_text(chat_id=message.chat.id, message_id=message.message_id + 1, text="–ù–∞—á–∏–Ω–∞—é –ø–∏—Å–∞—Ç—å —Ç–µ–∫—Å—Ç.")
    sleep(1)
    await bot.edit_message_text(chat_id=message.chat.id, message_id=message.message_id + 1, text="–ù–∞—á–∏–Ω–∞—é –ø–∏—Å–∞—Ç—å —Ç–µ–∫—Å—Ç..")
    sleep(1)
    await bot.edit_message_text(chat_id=message.chat.id, message_id=message.message_id + 1, text="–ù–∞—á–∏–Ω–∞—é –ø–∏—Å–∞—Ç—å —Ç–µ–∫—Å—Ç...")

    await message.reply(gpt3_completition(message.text))
    await bot.delete_message(chat_id = message.chat.id, message_id = message.message_id - 1)
    await bot.delete_message(chat_id = message.chat.id, message_id = message.message_id + 1)

    cursor = conn.cursor()
    cursor.execute("UPDATE users SET balance=balance-? WHERE user_id = ?", (num_words, message.from_user.id,))
    conn.commit()
    
    await bot.send_message (
        message.chat.id, 
        f"–¢–µ–∫—Å—Ç —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ {num_words} —Å–ª–æ–≤. –¢–≤–æ–π –æ—Å—Ç–∞–≤—à–∏–π—Å—è –±–∞–ª–∞–Ω—Å: {available_balance(message.from_user.id)} —Å–ª–æ–≤(–∞)", 
        reply_markup = keyboard_backdel)
    await state.finish()


#MAIN CODE
if __name__ == "__main__":
    create_connection(r"path")
    executor.start_polling(dp, skip_updates=True)



